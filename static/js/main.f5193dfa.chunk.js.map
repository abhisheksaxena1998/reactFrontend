{"version":3,"sources":["components/navbar.jsx","components/navbars.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","alt","src","height","loading","totalTasks","role","myComponent","state","currentItem","unique_id","index","name","time","phonenumber","tempId","info","created_at","result","ticketID","previousTime","updatedTime","records","gotinfo","startDate","isLoading","handleChangePrev","date","setState","handleChangeUpdated","handleChange","handleReset","console","log","handleView","Url","fetch","then","response","json","data","phone_number","handleViewReset","handleDelete","url","swal","componentDidMount","handleUpdateTime","newtime","Date","getTime","handleSubmit","formattedTime","this","columns","label","field","width","rows","length","md","icon","group","type","validate","error","required","success","value","placeholder","onChange","e","target","f","timeFormat","closeOnSelect","inputProps","toString","onClick","color","waves","cascade","dismiss","striped","bordered","small","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5193dfa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <nav className=\"heavy-rain-gradient navbar navbar-light bg-light\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-brand\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"https://raw.githubusercontent.com/abhisheksaxena1998/reactToDoApplication/main/src/og-image.png\"\r\n            height=\"60\"\r\n            loading=\"lazy\"\r\n          />\r\n          <strong>\r\n            {\"  \"}\r\n            Movie Ticketing System{\" \"}\r\n          </strong>\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {props.totalTasks}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <nav className=\"heavy-rain-gradient navbar navbar-light bg-light\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-brand\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"https://raw.githubusercontent.com/abhisheksaxena1998/reactToDoApplication/main/src/og-image.png\"\r\n            height=\"60\"\r\n            loading=\"lazy\"\r\n          />\r\n          <strong>\r\n            {\"  \"}\r\n            Movie Ticketing System{\" \"}\r\n          </strong>\r\n          <div className=\"spinner-grow text-secondary\" role=\"status\"></div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import './App.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport NavBar from \"./components/navbar\"\nimport NavS from \"./components/navbars\"\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact';\nimport { MDBDataTable } from 'mdbreact';\nimport React from 'react';\nimport Datetime from \"react-datetime\";\nimport \"react-datetime/css/react-datetime.css\";\nimport swal from \"sweetalert\";\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText } from 'mdbreact';\nimport { MDBAlert } from 'mdbreact';\n\nclass myComponent extends React.Component {\n  state = {\n    currentItem:{\n      unique_id:'',\n      index:'',\n      name:'',\n      time:'',\n      phonenumber:'',\n    },\n    tempId:'',\n    info:{ unique_id:'',\n    index:'',\n    name:'',\n    time:'',\n    phonenumber:'',\n    created_at:'',\n    result:'',\n         \n\n    },\n    ticketID:'',\n    previousTime:'',\n    updatedTime:'',\n    records: [],\n    gotinfo:false,\n    startDate:'',\n    isLoading: false,\n  };\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    const apiUrl = 'https://zomsystem.herokuapp.com/showallrecords';\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({ records: data , isLoading: false})\n        console.log(this.state)\n      });\n  }\n  handleChangePrev=(date)=>{\n    this.setState({previousTime:date})\n  }\n  handleChangeUpdated=(date)=>{\n    this.setState({updatedTime:date\n    })\n  }\n  handleChange = (date) => {\n    this.setState({currentItem:{               \n      unique_id:this.state.currentItem.unique_id, \n      name: this.state.currentItem.name,\n      phonenumber: this.state.currentItem.phonenumber,\n     time:date,   \n         \n    }})};\n  handleReset = ()=>{\n    console.log(\"reset clicked\")\n    console.log(this.state)\n  }\n  handleView=()=>{\n    if (this.state.ticketID!=='')\n    {\n    const Url = 'https://zomsystem.herokuapp.com/ticketinfo?query='+this.state.ticketID\n    console.log(\"handle view invoked\",this.state.ticketID,Url)\n    fetch(Url)\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({ info: data , gotinfo: true})\n        this.setState({info:{               \n          unique_id:data.unique_id, \n          name: data.name,\n          phonenumber: data.phone_number,\n         time:data.time,   \n         created_at:data.created_at,\n         result:data.result,\n         index:data.index\n         \n             \n        }})\n        console.log(this.state.info)\n      });}\n  }\n  handleViewReset=()=>\n  {\n    this.setState({gotinfo:false})\n  }\n  handleDelete=()=>{\n    console.log(\"delete clicked\",this.state.tempId)\n    if (this.state.tempId!=='')\n    {\n      var url=\"https://zomsystem.herokuapp.com/deleteticket?query=\"+this.state.tempId;\n      swal(\n        'Deleted !',\n        'Deleted Successfully !',\n        'error'\n                 )\n      fetch(url)\n      this.componentDidMount()\n    }\n    else{\n      swal(\n        'Enter unique id !',\n        'Enter unique id !',\n        'warning'\n                 )\n    }\n\n  }\n  handleUpdateTime=()=>{\n    var newtime= new Date(this.state.updatedTime).getTime()\n    var prevtime=new Date(this.state.previousTime).getTime()\n    var url=\"https://zomsystem.herokuapp.com/updatetime?oldtime=\"+ prevtime +\"&newtime=\"+ newtime ;\n    if ((this.state.previousTime!=='') && (this.state.updatedTime!=='') )\n    {\n      swal(\n        'Updated !',\n        'Updation done successfully !',\n        'success'\n                 )\n      fetch(url)\n      this.componentDidMount()\n    }\n    else{\n      swal(\n        'Invalid !',\n        'Please input all entries  !',\n        'warning'\n                 )\n    }\n    \n   \n  }\n  handleSubmit=()=>{\n    console.log(\"submit clicked\")\n    console.log(this.state)\n    console.log(\"Info is \",this.state.startDate)\n    this.setState({currentItem:{               \n      unique_id:this.state.currentItem.unique_id, \n      name: this.state.currentItem.name,\n      phonenumber: this.state.currentItem.phonenumber,\n     time:this.state.currentItem.time ,   \n         \n    }})\n    var formattedTime= new Date(this.state.currentItem.time).getTime()\n    console.log(formattedTime)\n    var url=\"https://zomsystem.herokuapp.com/addRecord?uniqueid=\"+this.state.currentItem.unique_id +\"&nm=\"+this.state.currentItem.name +\"&phonenumber=\"+this.state.currentItem.phonenumber +\"&time=\"+formattedTime ;\n    console.log(url)\n    if ((this.state.currentItem.unique_id!=='') && (this.state.currentItem.name!=='') && (this.state.currentItem.phonenumber!=='') && (this.state.currentItem.time!=='' ))\n    {\n      swal(\n        'Added !',\n        'Booked successfully !',\n        'success'\n                 )\n      fetch(url)\n      this.componentDidMount()\n    }\n    else{\n      swal(\n        'Invalid !',\n        'Please input all entries  !',\n        'warning'\n                 )\n    }\n    \n    \n  }\n  render() \n  {\n    \n    const data = {\n      columns: [\n        {\n          label: 'Unique Id',\n          field: 'unique_id',\n         \n          width: 50\n        },\n        {\n          label: 'Index',\n          field: 'index',\n          \n          width: 50\n        },\n        {\n          label: 'Name',\n          field: 'name',\n         \n          width: 50\n        },\n        {\n          label: 'Result',\n          field: 'result',\n       \n          width: 50\n        },\n        {\n          label: 'Time',\n          field: 'time',\n         \n          width: 50\n        },\n        {\n          label: 'Phone Number',\n          field: 'phone_number',\n          width: 50\n        },\n        {\n          label: 'Created At',\n          field: 'created_at',\n          width: 50\n        }\n      ],\n      rows: this.state.records\n      }\n\n      const viewApiRes = {\n        columns: [\n          {\n            label: 'Unique Id',\n            field: 'unique_id',\n           \n            width: 50\n          },\n          {\n            label: 'Index',\n            field: 'index',\n            \n            width: 50\n          },\n          {\n            label: 'Name',\n            field: 'name',\n           \n            width: 50\n          },\n          {\n            label: 'Result',\n            field: 'result',\n         \n            width: 50\n          },\n          {\n            label: 'Time',\n            field: 'time',\n           \n            width: 50\n          },\n          {\n            label: 'Phone Number',\n            field: 'phone_number',\n            width: 50\n          },\n          {\n            label: 'Created At',\n            field: 'created_at',\n            width: 50\n          }\n        ],\n        rows: this.state.info\n        }\n    const { records, isLoading } = this.state;\n    if (isLoading) {\n      //return <p>Loading ...</p>;\n      return (\n        <div>\n          <NavS />\n        <header className=\"App-header\">\n        <div className=\"spinner-grow text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n        <code>Fetching data from backend ...</code>\n        <div className=\"spinner-border text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n         \n        </header>\n        </div>\n      );\n    }\n    \n    return (\n      <div>\n         <NavBar totalTasks={this.state.records.length}/>\n\n         <MDBContainer>\n  <MDBRow>\n    <MDBCol md=\"6\" className=\"new-card\">\n      <form>\n        <p className=\"h5 text-center mb-4\">Book Ticket</p>\n        <div className=\"grey-text\">\n          <MDBInput label=\"Name\" icon=\"address-book\" group type=\"text\" validate error=\"wrong\" required\n            success=\"right\" value= {this.state.currentItem.name}\n            placeholder=\"Enter Name\"\n            onChange={(e) => {\n              this.setState({\n                currentItem:{               \n                  unique_id:this.state.currentItem.unique_id, \n                  name: e.target.value,\n                  phonenumber: this.state.currentItem.phonenumber,\n                  time:this.state.currentItem.time ,   \n         \n                }})\n               \n              console.log(this.state);}} />\n          <MDBInput label=\"Phone number \" icon=\"phone\" group type=\"phone\" value= {this.state.currentItem.phonenumber}\n          placeholder=\"Enter phone\"\n          onChange={(f) => {\n            this.setState({\n              currentItem:{ \n                name:this.state.currentItem.name ,               \n                unique_id:this.state.currentItem.unique_id,\n                phonenumber:f.target.value,\n                time:this.state.currentItem.time ,   \n         \n              }})\n             \n            console.log(this.state);\n          }}/>\n          <MDBInput label=\"Seat no.\" icon=\"envelope\" group type=\"text\" validate error=\"wrong\"\n            success=\"right\" value= {this.state.currentItem.unique_id}\n            placeholder=\"Enter unique id \"\n            onChange={(e) => {\n              this.setState({\n                currentItem:{               \n                 unique_id:e.target.value,\n                  name:this.state.currentItem.name ,\n                  phonenumber: this.state.currentItem.phonenumber,\n                  time:this.state.currentItem.time ,    \n         \n                }})\n               \n              console.log(this.state);}} />\n            \n           \n           <Datetime  value={this.state.currentItem.time}\n          onChange={this.handleChange}\n          timeFormat={true}\n          closeOnSelect={true}\n          inputProps={{ placeholder: \"Select timings of show\" }}/>\n          Selected timings :{\" \"}\n        {this.state.currentItem.time\n          ? this.state.currentItem.time.toString()\n          : \"No selected date\"}\n          {console.log('tien is',this.state.currentItem.time)}\n        \n        </div>\n        <div className=\"text-center\">\n          <MDBBtn  onClick={this.handleSubmit}>Submit</MDBBtn>\n        </div>\n      </form>\n    </MDBCol>\n    <MDBCol md=\"6\" className=\"new-card\">\n      <form>\n        <p className=\"h5 text-center mb-4\">Delete Ticket</p>\n        <div className=\"grey-text\">\n          <MDBInput label=\"Unique Id\" icon=\"id-card-alt\" group type=\"text\" validate error=\"wrong\" required\n            success=\"right\" value= {this.state.tempId}\n            placeholder=\"Enter Unique Id \"\n            onChange={(e) => {\n              this.setState({tempId:e.target.value   \n                })\n               \n              console.log(this.state);}} />\n         </div>\n        <div className=\"text-center\">\n          <MDBBtn color=\"danger\"  onClick={this.handleDelete}>Delete</MDBBtn>\n        </div>\n      </form>\n      <MDBRow>\n        <MDBCol>\n      <form>\n        <p className=\"h5 text-center mb-4\">Update Ticket Timings</p>\n        <div className=\"grey-text\">\n        <Datetime  value={this.state.previousTime}\n          onChange={this.handleChangePrev}\n          timeFormat={true}\n          closeOnSelect={true}\n          inputProps={{ placeholder: \"Select previous time\" }}/>\n          Previous Time :{\" \"}\n        {this.state.previousTime\n          ? this.state.previousTime.toString()\n          : \"No selected date\"}\n          {console.log('previous time is',this.state.previousTime)}\n         </div>\n          <div className=\"grey-text\">\n        <Datetime  value={this.state.updatedTime}\n          onChange={this.handleChangeUpdated}\n          timeFormat={true}\n          closeOnSelect={true}\n          inputProps={{ placeholder: \"Select updated time\" }}/>\n          Updated Time :{\" \"}\n        {this.state.updatedTime\n          ? this.state.updatedTime.toString()\n          : \"No selected date\"}\n          {console.log('updated time is',this.state.updatedTime)}\n         </div>\n        <div className=\"text-center\">\n          <MDBBtn color=\"primary\"  onClick={this.handleUpdateTime}>Update</MDBBtn>\n        </div>\n      </form>\n      </MDBCol>\n      </MDBRow>\n    </MDBCol>\n  \n    </MDBRow>\n    <MDBRow>\n      <MDBCol>\n    <form>\n        <p className=\"h5 text-center mb-4\">View the user’s details based on the ticket id</p>\n        <div className=\"grey-text\">\n          <MDBInput label=\"Ticket Id\" icon=\"id-card-alt\" group type=\"text\" validate error=\"wrong\" required\n            success=\"right\" value= {this.state.ticketID}\n            placeholder=\"Enter Ticket ID \"\n            onChange={(e) => {\n              this.setState({ticketID:e.target.value   \n                })\n               \n              console.log(this.state);}} />\n         </div>\n         <div className=\"text-center\">\n          <MDBBtn color=\"success\" onClick={this.handleView}>Fetch Details</MDBBtn>\n          <MDBBtn color=\"warning\" onClick={this.handleViewReset}>Reset Details</MDBBtn>\n        </div>\n        {(()=> {\n          \n          console.log(this.state.info)\n          if (this.state.gotinfo===true) {\n            return (  <MDBCol  >\n            <MDBCard className='text-center'>\n              <MDBCardImage className=\"img-fluid\" src=\"\"\n                waves />\n              <MDBCardBody cascade className='text-center'>\n                <MDBCardTitle>Detailed user information</MDBCardTitle>\n                <MDBCardText>View user details here</MDBCardText>\n                <MDBCardText>Index is: </MDBCardText>{this.state.info.index}\n                <MDBCardText>Username is: </MDBCardText>{this.state.info.name}\n                <MDBCardText>Unique ID is: </MDBCardText>{this.state.info.unique_id}\n                <MDBCardText>Time is: </MDBCardText>{this.state.info.time}\n                <MDBCardText>Booked at: </MDBCardText>{this.state.info.created_at}\n                <MDBCardText>Result is: </MDBCardText>{this.state.info.result}\n                <MDBCardText>Phone Number is: </MDBCardText>{this.state.info.phonenumber}\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>)\n          } else {\n            return ( <MDBContainer>\n              <MDBAlert className='text-center' color=\"warning\" dismiss>\n                <strong>Submit userid to view details!</strong> You should enter the feilds and submit to view user details.\n               \n              </MDBAlert>\n            </MDBContainer>);\n          }\n        })()}\n    </form>\n    </MDBCol>\n    </MDBRow>\n    <MDBRow>\n      <MDBCol>\n  <MDBDataTable className=\"tablee\"\n      striped\n      bordered\n      small\n      data={data}\n    /></MDBCol>\n    </MDBRow>\n\n</MDBContainer>      \n     \n    </div>\n    );\n  }\n}\nexport default myComponent;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}